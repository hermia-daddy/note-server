{"version":3,"sources":["components/Note.js","services/notes.js","services/login.js","components/Notification.js","components/Footer.js","components/LoginForm.js","components/Togglable.js","components/NoteForm.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","token","getAll","axios","get","then","response","data","create","newObject","a","config","headers","Authorization","post","update","id","put","setToken","newToken","console","log","login","credentials","Notification","message","Footer","style","color","fontStyle","fontSize","LoginForm","handleLogin","useState","username","setUsername","password","setPassword","onSubmit","event","preventDefault","type","value","onChange","target","prototypes","PropTypes","func","isRequired","Togglable","React","forwardRef","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","buttonLabel","children","NoteForm","createNote","newNote","setNewNote","name","App","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","user","setUser","noteFormRef","useRef","loginuser","loginService","window","localStorage","setItem","JSON","stringify","noteService","setTimeout","useEffect","initialNotes","loggedUserJson","getItem","parse","addNote","noteObject","current","savedNote","concat","noteToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","toggleImportanceOf","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c42af61.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    return (\r\n        <li className='note'>\r\n            {note.content}\r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = `/api/notes`\r\nlet token = null\r\n\r\nconst setToken = (newToken) => {\r\n  token = `bearer ${newToken}`\r\n  console.log('token is set:', token)\r\n}\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true\r\n  }\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nconst create = async (newObject) => {\r\n  const config = {\r\n    headers: { Authorization: token }\r\n  }\r\n  const response = await axios.post(baseUrl, newObject, config)\r\n  return response.data\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then((response) => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, setToken }\r\n","import axios from \"axios\";\r\nconst baseUrl = \"/api/login\";\r\n\r\nconst login = async (credentials) => {\r\n  const response = await axios.post(baseUrl, credentials);\r\n  return response.data;\r\n};\r\n\r\nexport default { login };\r\n","import React from 'react'\r\n\r\nconst Notification = ({message})=>{\r\n    if(message === null){\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color:'green',\r\n        fontStyle:'italic',\r\n        fontSize:16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br />\r\n            <em>Note app,Department of Computer Science</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst LoginForm = ({ handleLogin }) => {\r\n  const [username, setUsername] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const handlePasswordChange = (event) => {\r\n    setPassword(event.target.value)\r\n  }\r\n\r\n  const handleUsernameChange = (event) => {\r\n    setUsername(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    handleLogin({\r\n      username,\r\n      password\r\n    })\r\n    setUsername('')\r\n    setPassword('')\r\n  }\r\n  return (\r\n    <div>\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          username:\r\n          <input\r\n            type='text'\r\n            id='username'\r\n            value={username}\r\n            onChange={handleUsernameChange}\r\n          />\r\n        </div>\r\n        <div>\r\n          password:\r\n          <input\r\n            type='password'\r\n            id='password'\r\n            value={password}\r\n            onChange={handlePasswordChange}\r\n          />\r\n        </div>\r\n        <button id='login-button' type='submit'>\r\n          login\r\n        </button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nLoginForm.prototypes = {\r\n  handleLogin: PropTypes.func.isRequired\r\n}\r\n\r\nexport default LoginForm\r\n","import React, { useState, useImperativeHandle } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Togglable = React.forwardRef((props, ref) => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const hideWhenVisible = { display: visible ? 'none' : '' }\r\n  const showWhenVisible = { display: visible ? '' : 'none' }\r\n\r\n  const toggleVisibility = () => {\r\n    setVisible(!visible)\r\n  }\r\n\r\n  useImperativeHandle(ref, () => {\r\n    return {\r\n      toggleVisibility\r\n    }\r\n  })\r\n\r\n  return (\r\n    <div>\r\n      <div style={hideWhenVisible}>\r\n        <button onClick={toggleVisibility}>{props.buttonLabel}</button>\r\n      </div>\r\n      <div style={showWhenVisible} className='togglableContent'>\r\n        {props.children}\r\n        <button onClick={toggleVisibility}>cancel</button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\nTogglable.propTypes = {\r\n  buttonLabel: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Togglable\r\n","import React, { useState } from 'react'\r\n\r\nconst NoteForm = ({ createNote }) => {\r\n  const [newNote, setNewNote] = useState('')\r\n\r\n  const hanleChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    createNote({\r\n      content: newNote,\r\n      important: false\r\n    })\r\n    setNewNote('')\r\n  }\r\n  return (\r\n    <div className='formDiv'>\r\n      <h2>Create a new note</h2>\r\n      <form onSubmit={addNote}>\r\n        <div>\r\n          note:\r\n          <input\r\n            type='text'\r\n            id='input-content'\r\n            value={newNote}\r\n            name='Content'\r\n            onChange={hanleChange}\r\n          />\r\n        </div>\r\n        <button type='submit'>save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NoteForm\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport loginService from './services/login'\r\nimport Notification from './components/Notification'\r\nimport Footer from './components/Footer'\r\nimport LoginForm from './components/LoginForm'\r\nimport Togglable from './components/Togglable'\r\nimport NoteForm from './components/NoteForm'\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([])\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [user, setUser] = useState(null)\r\n  const noteFormRef = useRef()\r\n\r\n  const handleLogin = async (loginuser) => {\r\n    try {\r\n      const user = await loginService.login(loginuser)\r\n      setUser(user)\r\n      window.localStorage.setItem('loggedNoteappUser', JSON.stringify(user))\r\n      noteService.setToken(user.token)\r\n    } catch (exception) {\r\n      console.log(exception)\r\n      setErrorMessage('Wrong credentials')\r\n      setTimeout(() => {\r\n        setErrorMessage(null)\r\n      }, 5000)\r\n    }\r\n  }\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)))\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(\r\n          `the note '${note.content}' was already deleted from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter((n) => n.id !== id))\r\n      })\r\n  }\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const loggedUserJson = window.localStorage.getItem('loggedNoteappUser')\r\n    if (loggedUserJson) {\r\n      const user = JSON.parse(loggedUserJson)\r\n      noteService.setToken(user.token)\r\n      setUser(user)\r\n    }\r\n  }, [])\r\n\r\n  const addNote = async (noteObject) => {\r\n    noteFormRef.current.toggleVisibility()\r\n    const savedNote = await noteService.create(noteObject)\r\n    setNotes(notes.concat(savedNote))\r\n  }\r\n\r\n  const noteToShow = showAll\r\n    ? notes\r\n    : notes.filter((note) => note.important === true)\r\n\r\n  const loginForm = () => {\r\n    return (\r\n      <Togglable buttonLabel='login'>\r\n        <LoginForm handleLogin={handleLogin} />\r\n      </Togglable>\r\n    )\r\n  }\r\n\r\n  const noteForm = () => {\r\n    return (\r\n      <Togglable buttonLabel='create new note' ref={noteFormRef}>\r\n        <NoteForm createNote={addNote} />\r\n      </Togglable>\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={errorMessage} />\r\n      {user === null ? (\r\n        loginForm()\r\n      ) : (\r\n        <div>\r\n          <p>{user.name} logged in</p>\r\n          {noteForm()}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {noteToShow.map((note) => (\r\n          <Note\r\n            key={note.id}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <Footer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n// const notes = [\n//   {\n//     id: 1,\n//     content: 'HTML is easy',\n//     date: '2019-05-30T17:30:31.098Z',\n//     important: true\n//   },\n//   {\n//     id: 2,\n//     content: 'Browser can execute only Javascript',\n//     date: '2019-05-30T18:39:34.091Z',\n//     important: false\n//   },\n//   {\n//     id: 3,\n//     content: 'GET and POST are the most important methods of HTTP protocol',\n//     date: '2019-05-30T19:20:14.298Z',\n//     important: true\n//   }\n// ]\n\n\n\nReactDOM.render(<App /> ,document.getElementById('root'))\n"],"sourceRoot":""}